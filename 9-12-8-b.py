
import numpy as np
"""
Найдем максимальное значение функции
y' = exp**(-x**2) - 2*x**2*exp**(-x**2) обращается в ноль при х = 1/sqrt(2)
y_max = exp**(-1/2)/sqrt(2)
найдем два значения аргумента, при которых функция принимает значения, равные
половине от максимального
x*exp**(-x**2) = exp**(-1/2)/(2*sqrt(2))
Построив график также учтем, что х_1 из (0,2;0,4), а х_2 из (1,2; 1,4)
"""

"""
1 cпособ
x_(k+1) = (sqrt(2) * exp**(-1/2 + (x_k)**2))/4
Тогда f(x) = (sqrt(2) * exp**(-1/2 + (x_k)**2))/4
|f'(x)| < 1
f'(x) = (sqrt(2) *x * exp**(-1/2 + (x_k)**2))/2        (*)
Данное условие выполняется на промежутке (0,2;0,4)
"""

"""
2 способ
x_(k + 1) = sqrt(ln((4*x_k)/(sqrt(2)*exp**(-1/2)))
Этот итерационный процесс пригоден для поиска правого корня
"""

"""
Каждый из корней должен быть найден с точностью \epsilon /2
"""
x= 1 / 2**(1/2)
a = 1
i = 0
while abs(a) > 5*10**(-4):
    i-=-1
    b = (2**(1/2) * np.exp(-1/2 + (x)**2))/4
    a = b - x
    x = b
print("Решения уравнения")
print(round(x, 3))

x_1= 1 / 2**(1/2)
a = 1
i = 0
while abs(a) > 5*10**(-4):
    i-=-1
    b = np.sqrt(np.log((4*x_1)/(2**(1/2)*np.exp(-1/2))))
    a = b - x_1
    x_1 = b
print(round (x_1, 3))
print("Ширина на полувысоте", round (x_1 - x, 3))
